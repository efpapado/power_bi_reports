<?php

use GuzzleHttp\Client;

define('POWER_BI_REPORTS__GROUPS', 'https://api.powerbi.com/v1.0/myorg/groups');
define('POWER_BI_REPORTS__REPORTS_IN_GROUP', 'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/reports');
define('POWER_BI_REPORTS__DATASETS_IN_GROUP', 'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/datasets');
define('POWER_BI_REPORTS__REPORT_EMBED_TOKEN', 'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/reports/{reportId}/GenerateToken');

/**
 * Implements hook_libraries_info().
 */
function power_bi_reports_libraries_info() {
  $libraries['powerbi_javascript'] = [
    'name' => 'Microsoft/PowerBI-JavaScript',
    'vendor url' => 'https://github.com/Microsoft/PowerBI-JavaScript',
    'download url' => 'https://github.com/Microsoft/PowerBI-JavaScript',
    'version arguments' => [
      'file' => 'package.json',
      'pattern' => '/"version":\\s+"([0-9\.]+)"/',
      'lines' => 10,
    ],
    'files' => [
      'js' => ['dist/powerbi.min.js'],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_menu().
 *
 * Provides a configuration page.
 */
function power_bi_reports_menu() {
  $items['admin/config/services/power-bi-reports'] = [
    'title' => 'Power BI Reports',
    'access arguments' => ['administer site configuration'], // @TODO
    'page callback' => 'drupal_get_form',
    'page arguments' => ['power_bi_reports_admin_form'],
    'file' => 'power_bi_reports.admin.inc',
    'description' => 'Configure Power BI Reports module.',
  ];
  $items['admin/config/services/power-bi-reports/status'] = [
    'title' => 'Power BI Reports',
    'access arguments' => ['administer site configuration'], // @TODO
    'page callback' => 'drupal_get_form',
    'page arguments' => ['power_bi_reports_status_form'],
    'file' => 'power_bi_reports.admin.inc',
    'description' => 'Power BI Reports status.',
  ];
  return $items;
}

/**
 * Implements hook_field_info().
 */
function power_bi_reports_field_info() {
  $info = [];
  $info['power_bi_reports_report'] = [
    'label' => t('Power BI Report'),
    'description' => t('Hosts a Power BI Report.'),
    'default_widget' => 'power_bi_reports_select_widget',
    'default_formatter' => 'power_bi_reports_simple_embed_formatter',
  ];
  return $info;
}

/**
 * Implements hook_field_is_empty().
 */
function power_bi_reports_field_is_empty($item, $field) {
  return empty($item['report_id']);
}

/**
 * Implements hook_field_widget_info().
 */
function power_bi_reports_field_widget_info() {
  require_once 'power_bi_reports.widgets.inc';
  return _power_bi_reports_field_widget_info();
}

/**
 * Implements hook_field_widget_form().
 */
function power_bi_reports_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  require_once 'power_bi_reports.widgets.inc';
  return _power_bi_reports_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * Implements hook_field_formatter_info().
 */
function power_bi_reports_field_formatter_info() {
  require_once 'power_bi_reports.formatters.inc';
  return _power_bi_reports_field_formatter_info();
}

/**
 * Implements hook_field_formatter_view().
 */
function power_bi_reports_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  require_once 'power_bi_reports.formatters.inc';
  return _power_bi_reports_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}


function power_bi_reports_get_form_element($form, &$form_state, $default_value = '') {
  $power_bi_reports_data = variable_get('power_bi_reports_data', FALSE);
  if (!$power_bi_reports_data) {
    $power_bi_reports_data = power_bi_reports_sync_reports();
  }

  $element = [
    '#type' => 'select',
    '#title' => t('Report'),
    '#options' => _power_bi_reports_get_grouped_options($power_bi_reports_data),
    '#empty_value' => '',
    '#default_value' => $default_value,
  ];

  return $element;
}


function power_bi_reports_sync_reports() {
  $groups = [];

  $groups_raw = power_bi_reports_get_groups();

  foreach ($groups_raw as $group) {
    $group_id = $group['id'];
    $reports_in_group = power_bi_reports_get_reports_in_group($group_id);
    $groups[$group_id] = $group;
    $groups[$group_id]['reports'] = $reports_in_group;
  }
  variable_set('power_bi_reports_data', $groups);
  variable_set('power_bi_reports_last_sync_reports', REQUEST_TIME);
  return $groups;
}

function _power_bi_reports_get_grouped_options($power_bi_reports_data) {
  $options = [];
  foreach ($power_bi_reports_data as $group) {
    foreach ($group['reports'] as $report) {
      $options[$group['name']][$report['id']] = $report['name'];
    }
  }
  return $options;
}

/**
 * Gets a valid auth token.
 *
 * @param bool $force_renew
 *
 * @return mixed|void
 */
function power_bi_reports_get_auth_token($force_renew = FALSE) {
  // First check if there's a non-expired cached auth token.
  $access_token = variable_get('power_bi_reports_access_token', [
    'expires' => 0,
    'token' => '',
  ]);

  $expires = $access_token['expires'];
  if (!$force_renew && $expires > REQUEST_TIME) {
    // There's a token that hasn't expired, use this.
    return $access_token['token'];
  }
  else {
    // Get a new token.
    $client = new GuzzleHttp\Client();

    $tenant_id = variable_get('power_bi_reports_tenant_id');
    $endpoint = "https://login.windows.net/$tenant_id/oauth2/token";
    $resource = variable_get('power_bi_reports_resource');
    $client_id = variable_get('power_bi_reports_client_id');
    $username = variable_get('power_bi_reports_username');
    $password = variable_get('power_bi_reports_password');

    $r = $client->post(
      $endpoint,
      [
        'form_params' => [
          'resource' => $resource,
          'client_id' => $client_id,
          'grant_type' => 'password',
          'username' => $username,
          'password' => $password,
          'scope' => 'openid',
        ],
      ]
    );

    if ($r->getStatusCode() != 200) {
      // @TODO handle error and return
      return FALSE;
    }

    $response_json = json_decode($r->getBody());
    $token = [
      'expires' => $response_json->expires_on,
      'token' => $response_json->access_token,
    ];

    variable_set('power_bi_reports_access_token', $token);
    return $token['token'];
  }
}

/**
 * Gets an embed token for a report.
 *
 * @param $group_id
 * @param $report_id
 *
 * @return bool|string
 */
function power_bi_reports_get_report_embed_token($group_id, $report_id) {
  // Get a token.
  $token = power_bi_reports_get_auth_token();

  $endpoint = POWER_BI_REPORTS__REPORT_EMBED_TOKEN;
  $endpoint = str_replace('{groupId}', $group_id, $endpoint);
  $endpoint = str_replace('{reportId}', $report_id, $endpoint);

  $body = [
    'accessLevel' => 'View',
  ];

  $headers = [
    "Authorization" => sprintf("Bearer %s", $token),
  ];

  $guzzle = new GuzzleHttp\Client();
  $res = $guzzle->post(
    $endpoint,
    [
      'headers' => $headers,
      'form_params' => $body,
    ]
  );

  if ($res->getStatusCode() == 200) {
    $response_contents = $res->getBody()->getContents();
    // @TODO handle good response!
    return $response_contents;
  }
  else {
    // @TODO handle errors
    return FALSE;
  }

}

function power_bi_reports_get_groups() {
  // Get a token.
  $token = power_bi_reports_get_auth_token();

  $endpoint = POWER_BI_REPORTS__GROUPS;

  $headers = [
    "Authorization" => sprintf("Bearer %s", $token),
  ];

  $guzzle = new GuzzleHttp\Client();
  $res = $guzzle->get(
    $endpoint,
    [
      'headers' => $headers,
    ]
  );

  if ($res->getStatusCode() == 200) {
    $response_contents = $res->getBody()->getContents();
    $response_contents_decoded = json_decode($response_contents, TRUE);
    // @TODO handle good response!
    return $response_contents_decoded['value'];
  }
  else {
    // @TODO handle errors
    return FALSE;
  }
}

function power_bi_reports_get_reports_in_group($group_id) {
  // Get a token.
  $token = power_bi_reports_get_auth_token();

  $endpoint = POWER_BI_REPORTS__REPORTS_IN_GROUP;
  $endpoint = str_replace('{groupId}', $group_id, $endpoint);

  $headers = [
    "Authorization" => sprintf("Bearer %s", $token),
  ];

  $guzzle = new GuzzleHttp\Client();
  $res = $guzzle->get(
    $endpoint,
    [
      'headers' => $headers,
    ]
  );

  if ($res->getStatusCode() == 200) {
    $response_contents = $res->getBody()->getContents();
    // @TODO handle good response!
    $response_contents_decoded = json_decode($response_contents, TRUE);
    // @TODO handle good response!
    return $response_contents_decoded['value'];
  }
  else {
    // @TODO handle errors
    return FALSE;
  }

}

//function _power_bi_reports_get_groups_options($groups_raw) {
//  $groups_options = [];
//  foreach ($groups_raw as $group_raw) {
//    $groups_options[$group_raw['id']] = $group_raw['name'];
//  }
//  asort($groups_options);
//  return $groups_options;
//}

//function _power_bi_reports_normalize_groups($groups) {
//  $groups_sorted = [];
//  foreach ($groups as $group) {
//    $groups_sorted[$group['id']] = ['name' => $group['name']];
//  }
//  uasort($groups_sorted, function ($a, $b) {
//    return $a['name'] > $b['name'];
//  });
//  return $groups_sorted;
//}

