<?php

define('POWER_BI_REPORTS__GROUPS', 'https://api.powerbi.com/v1.0/myorg/groups');
define('POWER_BI_REPORTS__REPORTS_IN_GROUP', 'https://api.powerbi.com/v1.0/myorg/groups/{groupId}/reports');

/**
 * Implements hook_menu().
 *
 * Provides a configuration page.
 */
function power_bi_reports_menu() {
  $items['admin/config/services/power-bi-reports'] = [
    'title' => 'Power BI Reports',
    'access arguments' => ['administer site configuration'], // @TODO
    'page callback' => 'drupal_get_form',
    'page arguments' => ['power_bi_reports_admin_form'],
    'description' => 'Configure Power BI Reports module.',
  ];
  $items['admin/config/services/power-bi-reports/status'] = [
    'title' => 'Power BI Reports',
    'access arguments' => ['administer site configuration'], // @TODO
    'page callback' => 'drupal_get_form',
    'page arguments' => ['power_bi_reports_status_form'],
    'description' => 'Power BI Reports status.',
  ];
  return $items;
}

/**
 * Implements hook_field_info().
 */
function power_bi_reports_field_info() {
  $info = [];
  $info['power_bi_reports_report'] = [
    'label' => t('Power BI Report'),
    'description' => t('Hosts a Power BI Report.'),
    'default_widget' => 'power_bi_reports_select_widget',
    'default_formatter' => 'power_bi_reports_simple_embed_formatter',
  ];
  return $info;
}

/**
 * Implements hook_field_is_empty().
 */
function power_bi_reports_field_is_empty($item, $field) {
  return empty($item['report_id']);
}

/**
 * Implements hook_field_widget_info().
 */
function power_bi_reports_field_widget_info() {
  require_once 'power_bi_reports.widgets.inc';
  return _power_bi_reports_field_widget_info();
}

/**
 * Implements hook_field_widget_form().
 */
function power_bi_reports_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  require_once 'power_bi_reports.widgets.inc';
  return _power_bi_reports_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * Implements hook_field_formatter_info().
 */
function power_bi_reports_field_formatter_info() {
  require_once 'power_bi_reports.formatters.inc';
  return _power_bi_reports_field_formatter_info();
}

/**
 * Implements hook_field_formatter_view().
 */
function power_bi_reports_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  require_once 'power_bi_reports.formatters.inc';
  return _power_bi_reports_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Menu callback to configure module settings.
 */
function power_bi_reports_admin_form($form, &$form_state) {
  $form['power_bi_reports_tenant_id'] = [
    '#type' => 'textfield',
    '#title' => t('Tenant ID'),
    '#default_value' => variable_get('power_bi_reports_tenant_id'),
    '#required' => TRUE,
  ];
  $form['power_bi_reports_resource'] = [
    '#type' => 'textfield',
    '#title' => t('Resource'),
    '#default_value' => variable_get('power_bi_reports_resource', 'https://analysis.windows.net/powerbi/api'),
    '#required' => TRUE,
  ];
  $form['power_bi_reports_client_id'] = [
    '#type' => 'textfield',
    '#title' => t('Client ID'),
    '#default_value' => variable_get('power_bi_reports_client_id'),
    '#required' => TRUE,
  ];
  $form['power_bi_reports_username'] = [
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('power_bi_reports_username'),
    '#required' => TRUE,
  ];
  $form['power_bi_reports_password'] = [ // @TODO fix this
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => variable_get('power_bi_reports_password'),
    '#required' => TRUE,
  ];

  return system_settings_form($form);
}

function power_bi_reports_get_form_element($form, &$form_state, $default_value = '') {
  $power_bi_reports_data = variable_get('power_bi_reports_data', FALSE);
  if (!$power_bi_reports_data) {
    $power_bi_reports_data = power_bi_reports_sync_reports();
  }

  $element = [
    '#type' => 'select',
    '#title' => t('Report'),
    '#options' => _power_bi_reports_get_grouped_options($power_bi_reports_data),
    '#empty_value' => '',
    '#default_value' => $default_value,
  ];

  return $element;
}

function power_bi_reports_status_form($form, &$form_state) {
  $form = [];

  $form['token_renew'] = [
    '#markup' => '@TODO create a token renew button',
  ];

  $form['reports'] = power_bi_reports_get_form_element($form, $form_state);

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => 'Submit',
  ];

  return $form;
}

function power_bi_reports_status_form_submit($form, &$form_state) {
  dpm($form, '$form');
  dpm($form_state['values'], '$form_state values');
}


function power_bi_reports_sync_reports() {
  $groups = [];
  // Get a token.
  $token = power_bi_reports_get_auth_token();

  // @TODO rename variables

  $client = new \Tngnt\PBI\Client($token);
  $greq = $client->request('GET', POWER_BI_REPORTS__GROUPS);
  $gresponse = $client->generateResponse($greq);
  $gresp_array = $gresponse->toArray();
  $groups_raw = $gresp_array['value'];

  foreach ($groups_raw as $group) {
    $group_id = $group['id'];
    $endpoint = str_replace('{groupId}', $group_id, POWER_BI_REPORTS__REPORTS_IN_GROUP);
    $rreq = $client->request('GET', $endpoint);
    $rresponse = $client->generateResponse($rreq);
    $rresp_array = $rresponse->toArray();
    $reports = $rresp_array['value'];
    $groups[$group_id] = $group;
    $groups[$group_id]['reports'] = $reports;
  }
  variable_set('power_bi_reports_data', $groups);
  variable_set('power_bi_reports_last_sync', REQUEST_TIME);
  return $groups;
}

//function _power_bi_reports_get_reports_options($group_id, \Tngnt\PBI\Client $client) {
//  $reports_options = [];
//  $endpoint = str_replace('{groupId}', $group_id, POWER_BI_REPORTS__REPORTS_IN_GROUP);
//  $req = $client->request('GET', $endpoint);
//  $response = $client->generateResponse($req);
//  $resp_array = $response->toArray();
//  $reports_raw = $resp_array['value'];
//  foreach ($reports_raw as $report_raw) {
//    $reports_options[$report_raw['id']] = $report_raw['name'];
//  }
//  return $reports_options;
//}

/**
 * Gets a valid auth token.
 *
 * @param bool $force_renew
 *
 * @return mixed|void
 */
function power_bi_reports_get_auth_token($force_renew = FALSE) {
  // First check if there's a non-expired cached auth token.
  $access_token = variable_get('power_bi_reports_access_token', [
    'expires' => 0,
    'token' => '',
  ]);

  $expires = $access_token['expires'];
  if (!$force_renew && $expires > REQUEST_TIME) {
    // There's a token that hasn't expired, use this.
    return $access_token['token'];
  }
  else {
    // Get a new token.
    $client = new GuzzleHttp\Client();

    $tenant_id = variable_get('power_bi_reports_tenant_id');
    $endpoint = "https://login.windows.net/$tenant_id/oauth2/token";
    $resource = variable_get('power_bi_reports_resource');
    $client_id = variable_get('power_bi_reports_client_id');
    $username = variable_get('power_bi_reports_username');
    $password = variable_get('power_bi_reports_password');

    $r = $client->post(
      $endpoint,
      [
        'form_params' => [
          'resource' => $resource,
          'client_id' => $client_id,
          'grant_type' => 'password',
          'username' => $username,
          'password' => $password,
          'scope' => 'openid',
        ],
      ]
    );

    if ($r->getStatusCode() != 200) {
      // @TODO handle error and return
      return;
    }

    $response_json = json_decode($r->getBody());
    $token = [
      'expires' => $response_json->expires_on,
      'token' => $response_json->access_token,
    ];

    variable_set('power_bi_reports_access_token', $token);
    return $token['token'];
  }
}

//function _power_bi_reports_get_groups_options($groups_raw) {
//  $groups_options = [];
//  foreach ($groups_raw as $group_raw) {
//    $groups_options[$group_raw['id']] = $group_raw['name'];
//  }
//  asort($groups_options);
//  return $groups_options;
//}

//function _power_bi_reports_normalize_groups($groups) {
//  $groups_sorted = [];
//  foreach ($groups as $group) {
//    $groups_sorted[$group['id']] = ['name' => $group['name']];
//  }
//  uasort($groups_sorted, function ($a, $b) {
//    return $a['name'] > $b['name'];
//  });
//  return $groups_sorted;
//}

